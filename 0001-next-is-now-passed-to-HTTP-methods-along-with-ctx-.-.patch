From 2abf66038599da2a2e29660f1f043c6a87d3f6ac Mon Sep 17 00:00:00 2001
From: Andy Chase <andy.chase@proofgeist.com>
Date: Mon, 12 Dec 2022 09:56:38 -0500
Subject: [PATCH] 'next' is now passed to HTTP methods along with `ctx`. Rename
 package to 'koa-ctl', update readme

---
 LICENSE             |  2 +-
 README.md           | 28 +++++++++++++---------------
 package.json        |  8 ++++----
 src/index.ts        | 33 ++++++++++++++++++++-------------
 tests/index.test.ts | 12 ++++++------
 5 files changed, 44 insertions(+), 39 deletions(-)

diff --git a/LICENSE b/LICENSE
index 6a0d7b6..065d0d5 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,6 +1,6 @@
 MIT License
 
-Copyright (c) 2022 koa-cbc contributors
+Copyright (c) 2022 koa-ctl contributors
 
 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 
diff --git a/README.md b/README.md
index f4049c1..abec47c 100644
--- a/README.md
+++ b/README.md
@@ -1,30 +1,28 @@
 # Class-based Controller Middleware for [Koa](https://koajs.com)
 
-## Note 
-2022-12-09: This does not actually work yet... somewhere between 'poc' and 'make all the tests green', something broke.
-
 -----
 
-If you're familiar with Django's [class-based views](https://docs.djangoproject.com/en/4.1/topics/class-based-views/) then `koa-cbc` should feel familiar. It lets you organize different HTTP operations related to a given resource into one class, which is often conceptually and organizationally helpful.
+koa-ctl lets you collect HTTP methods related to a single resource into one class, which is often conceptually and organizationally helpful.
+
+If you're familiar with Django's [class-based views](https://docs.djangoproject.com/en/4.1/topics/class-based-views/) then `koa-ctl` should feel familiar!
 
 ## TypeScript Example
 
-(With @types/koa installed)
+(With koa-router, koa-bodyparser, @types/koa, @types/koa-bodyparser and @types/koa-router installed)
 
 ```TypeScript
 import Koa, {Context, Next} from "koa";
 import bodyParser from "koa-bodyparser";
-import BaseCtl from "koa-cdc";
+import router from "koa-router";
+import BaseCtl from "koa-ctl";
 
 class FooCtl extends BaseCtl {
   constructor(ctx: Controller, next?: Next ) {
     super(ctx, next);
   }
 
-  async get() {
-    const userId = this.ctx.request.query.id;
-    // [...look up user...]
-    if (this.ctx.request.query.foo.toLowerCase() == 'foo') {
+  async get(ctx: Context, next?: Next) {
+    if (ctx.request.query.foo.toLowerCase() == 'foo') {
       return "bar";
     }
     else {
@@ -32,9 +30,9 @@ class FooCtl extends BaseCtl {
     }
   }
 
-  async post() {
+  async post(ctx: Context, next?: Next) {
     // (POST request data will have been parsed by koa-bodyparser)
-    if (this.ctx.request.body.bar.toLowerCase() == 'bar') {
+    if (ctx.request.body.bar.toLowerCase() == 'bar') {
       return "bat";
     }
     else {
@@ -45,7 +43,7 @@ class FooCtl extends BaseCtl {
 
 const app = new Koa();
 app.use(bodyParser());
-app.use(FooCtl.go())
+app.use(route.all("/foo", FooCtl.go()));
 app.listen(3000);
 ```
 
@@ -78,10 +76,10 @@ npm install --save-dev @types/koa
 
 ```bash
 # Clone the repository:
-git clone https://github.com/mystery-house/koa-cbc.git
+git clone https://github.com/mystery-house/koa-ctl.git
 
 # Install dependencies
-cd koa-cbc
+cd koa-ctl
 yarn install
 
 # Run tests
diff --git a/package.json b/package.json
index 760a92c..6e29bb2 100644
--- a/package.json
+++ b/package.json
@@ -1,9 +1,9 @@
 {
-  "name": "koa-cbc",
-  "version": "0.1.0-unstable",
+  "name": "koa-ctl",
+  "version": "0.2.0-unstable",
   "description": "Class-based controllers for Koa 2",
   "main": "dist/index.js",
-  "repository": "https://github.com/mystery-house/koa-cbc.git",
+  "repository": "https://github.com/mystery-house/koa-ctl.git",
   "author": "Andy Chase <andychase@gmail.com>",
   "license": "MIT",
   "private": false,
@@ -27,4 +27,4 @@
     "ts-node": "^10.9.1",
     "typescript": "^4.9.4"
   }
-}
+}
\ No newline at end of file
diff --git a/src/index.ts b/src/index.ts
index 302555e..f38dc8d 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -107,31 +107,31 @@ export type HttpStatusCode =
 interface BaseCtl {
   /** Handles HTTP GET requests */
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  get?(ctx: Context): Promise<any>;
+  get?(ctx: Context, next?: Next): Promise<any>;
   /** Handles HTTP GET requests */
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  post?(ctx: Context): Promise<any>;
+  post?(ctx: Context, next?: Next): Promise<any>;
   /** Handles HTTP GET requests */
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  put?(ctx: Context): Promise<any>;
+  put?(ctx: Context, next?: Next): Promise<any>;
   /** Handles HTTP PUT requests */
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  patch?(ctx: Context): Promise<any>;
+  patch?(ctx: Context, next?: Next): Promise<any>;
   /** Handles HTTP DELETE requests */
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  delete?(ctx: Context): Promise<any>;
+  delete?(ctx: Context, next?: Next): Promise<any>;
   /** Handles HTTP HEAD requests */
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  head?(ctx: Context): Promise<any>;
+  head?(ctx: Context, next?: Next): Promise<any>;
   /** Handles HTTP CONNECT requests */
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  connect?(ctx: Context): Promise<any>;
+  connect?(ctx: Context, next?: Next): Promise<any>;
   /** Handles HTTP OPTIONS requests */
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  options?(ctx: Context): Promise<any>;
+  options?(ctx: Context, next?: Next): Promise<any>;
   /** Handles HTTP TRACE requests */
   // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  trace?(ctx: Context): Promise<any>;
+  trace?(ctx: Context, next?: Next): Promise<any>;
 }
 
 /**
@@ -168,12 +168,19 @@ class BaseCtl {
 
   /**
    * Dispatches the controller method designated by the context request and sets the response
-   * body accordingly.
+   * body accordingly. The `ctx` and `next` properties are passed directly to the method as a
+   * convenience. (In this case the `next` property is actually a wrapper which ensures that
+   * `next` only gets called once.)  If `next` exists and you do not explicitly invoke it in your
+   * method(s), it will be called automatically before `dispatch` returns.
    *
-   * Because the most typical pattern is "call a method, send a response", methods return just the
-   * body value, and any changes to the HTTP status code or headers are left up to the implementor.
+   * Because the typical controller pattern is "call a method, send a response", methods can just 
+   * return a value instead of modifying properties on the `ctx` argument; `dispatch` takes care
+   * of that for you. If you need to update the response status or headers, use the `setResponseStatus()`
+   * and `setResponseHeaders()` methods.
    *
    * The default response status code is 200.
+   * 
+   * 
    *
    * @TODO might be nice to have an option to automagically parse POST request bodies without
    * needing to explicitly add `koa-bodyparse` to the middleware chain
@@ -196,7 +203,7 @@ class BaseCtl {
     try {
       // Hat-tip to Daniel W Strimpel for this solution
       // for making method names dynamically indexable. (https://stackoverflow.com/a/53194405)
-      const body = await (this as Indexable)[methodName](this.ctx);
+      const body = await (this as Indexable)[methodName](this.ctx, () => this.next());
       this.setResponseBody(body);
       if (!this._nextCalled) {
         this.next();
diff --git a/tests/index.test.ts b/tests/index.test.ts
index b57b6fa..cf6c0d4 100644
--- a/tests/index.test.ts
+++ b/tests/index.test.ts
@@ -175,8 +175,8 @@ describe("BaseCtl", () => {
         super(ctx, next);
       }
 
-      async get(ctx: Context) {
-        await this.next();
+      async get(ctx: Context, next: Next) {
+        await next();
         return ctx.body + "After";
       }
     }
@@ -207,9 +207,9 @@ describe("BaseCtl", () => {
         super(ctx, next);
       }
 
-      async get(ctx: Context) {
-        await this.next();
-        await this.next();
+      async get(ctx: Context, next: Next) {
+        await next();
+        await next();
         return ctx.body + "After";
       }
     }
@@ -230,7 +230,7 @@ describe("BaseCtl", () => {
   });
 
   it("should return a Koa middleware function when the static `go` method is called.", () => {
-    class GoTest extends BaseCtl {}
+    class GoTest extends BaseCtl { }
 
     expect(typeof GoTest.go()).toEqual("function");
     // @TODO pass GoTest.go() to koa.use() and assert the args it was called with
-- 
2.38.1

